// <auto-generated />
using System;
using Easyfood.Partners.Infrastructure.Persistence.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Easyfood.Partners.Infrastructure.Persistence.EF.Migrations
{
    [DbContext(typeof(PartnersDbContext))]
    partial class PartnersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompanyCategory")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Merchant", (string)null);
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Owner", (string)null);
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Opinion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Rating")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.MenuItem", b =>
                {
                    b.HasOne("Easyfood.Partners.Domain.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId");

                    b.OwnsOne("Easyfood.Partners.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("MenuItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Currency")
                                .HasColumnType("int")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Value")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Value");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("Item");

                            b1.WithOwner()
                                .HasForeignKey("MenuItemId");
                        });

                    b.Navigation("Menu");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.Merchant", b =>
                {
                    b.HasOne("Easyfood.Partners.Domain.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Easyfood.Partners.Domain.Entities.Owner", "Owner")
                        .WithMany("Merchants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Easyfood.Partners.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("MerchantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("nvarchar(9)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("MerchantId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("MerchantId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.Review", b =>
                {
                    b.HasOne("Easyfood.Partners.Domain.Entities.Merchant", "Merchant")
                        .WithMany("Reviews")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.Merchant", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Easyfood.Partners.Domain.Entities.Owner", b =>
                {
                    b.Navigation("Merchants");
                });
#pragma warning restore 612, 618
        }
    }
}
